{
  "contractName": "Evaluator",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.6.2+commit.bacdbe57\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/Evaluator.sol\":\"Evaluator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"urls\":[\"bzz-raw://526dc85e1f9b9b45830e202568d267d93dde7a4fcccf4ad7798dadcd92304d3c\",\"dweb:/ipfs/QmaoXMB972J3cSDLtBq3xBo4jLwqD2uzXTwujtSPqkYVhR\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"urls\":[\"bzz-raw://991b44ff44e0496e8554a90f4c0512c28faed45104d40430019f3c67ea67740e\",\"dweb:/ipfs/Qmc3nRapVbcctELoZS5qe17zLkFB3bETBfwzCTMF1CSuGE\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"urls\":[\"bzz-raw://24427744bd3e6cb73c17010119af12a318289c0253a4d9acb8576c9fb3797b08\",\"dweb:/ipfs/QmTLDqpKRBuxGxRAmjgXt9AkXyACW3MtKzi7PYjm5iMfGC\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"urls\":[\"bzz-raw://ded47ec7c96750f9bd04bbbc84f659992d4ba901cb7b532a52cd468272cf378f\",\"dweb:/ipfs/QmfBrGtQP7rZEqEg6Wz6jh2N2Kukpj1z5v3CGWmAqrzm96\"]},\"project:/contracts/ERC20TD.sol\":{\"keccak256\":\"0xd6f8cf155f5563d8267b51c9f91f1ccebcefec29e46bf43b1c399c436c33dd54\",\"urls\":[\"bzz-raw://3bfae2a1b311833a7bf3fe1c113cafe38db2225019e7c9a8e1c450e0a921072a\",\"dweb:/ipfs/QmWfEzk1QkY1qfdX6iKxDNmDNVr4ENSh57p5KMsHMakyka\"]},\"project:/contracts/Evaluator.sol\":{\"keccak256\":\"0xd846698c61f321fb4573c8614fd6bfa26f0529d427e73684abe7df48d9a4a86d\",\"urls\":[\"bzz-raw://db4a4c0e40e4448822046a3550d88900fd13b19262ba274c4f6f54d69aba7dfb\",\"dweb:/ipfs/QmdAeTUCNvS4AigKto6p5Qo4pjsVkBQXFcQnX7WQttBivC\"]},\"project:/contracts/IAllInOneSolution.sol\":{\"keccak256\":\"0x8ca12934d227ec8e5d788e910f8d4c7288792f7140d5442b1abcdf3ff62070d3\",\"urls\":[\"bzz-raw://275299eaf2337e7d6cd568e9973f8854af785db675af35b7aac4955c2f34c44d\",\"dweb:/ipfs/QmWKMc9wYv2aacrSWKXeebUgm8xaJDYpYp6hFqCTMi5uzP\"]},\"project:/contracts/IExerciceSolution.sol\":{\"keccak256\":\"0x007f3c2155e23eb127ac2eabb81530fa7c6233cb2ee11a74826c8b4423950f0c\",\"urls\":[\"bzz-raw://816c646c686171bcf3acaad37b845f5ec0731ceea2659c7cf78c4f53aa23aa7e\",\"dweb:/ipfs/QmPsu8B5Qjvtv2rB2AWW6AcjsMSigPPAUae3EPyg8Zu6qj\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122050fe6c471eb4fc684a543142dd3d9f3a90a20f59e384853dbf086944eab7ba9264736f6c63430006020033",
  "deployedBytecode": "0x6080604052600080fdfea264697066735822122050fe6c471eb4fc684a543142dd3d9f3a90a20f59e384853dbf086944eab7ba9264736f6c63430006020033",
  "sourceMap": "159:11520:5:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;159:11520:5;;;;;;;",
  "deployedSourceMap": "159:11520:5:-:0;;;;;",
  "source": "pragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"./ERC20TD.sol\";\r\nimport \"./IExerciceSolution.sol\";\r\nimport \"./IAllInOneSolution.sol\";\r\n\r\ncontract Evaluator \r\n{\r\n\t/*\r\n\tmapping(address => bool) public teachers;\r\n\tERC20TD TDERC20;\r\n\r\n\tuint256[20] private randomSupplies;\r\n\tstring[20] private randomTickers;\r\n \tuint public nextValueStoreRank;\r\n\r\n \tmapping(address => string) public assignedTicker;\r\n \tmapping(address => uint256) public assignedSupply;\r\n \tmapping(address => mapping(uint256 => bool)) public exerciceProgression;\r\n \tmapping(address => IExerciceSolution) public studentErc20;\r\n \tmapping(address => uint256) public ex8Tier1AmountBought;\r\n \tmapping(address => bool) public hasBeenPaired;\r\n\r\n \tevent newRandomTickerAndSupply(string ticker, uint256 supply);\r\n \tevent constructedCorrectly(address erc20Address);\r\n\tconstructor(ERC20TD _TDERC20) \r\n\tpublic \r\n\t{\r\n\t\tTDERC20 = _TDERC20;\r\n\t\temit constructedCorrectly(address(TDERC20));\r\n\r\n\t}\r\n\r\n\tfallback () external payable \r\n\t{}\r\n\r\n\treceive () external payable \r\n\t{}\r\n\r\n\r\n\tfunction ex1_getTickerAndSupply()\r\n\tpublic\r\n\t{\r\n\t\tassignedSupply[msg.sender] = randomSupplies[nextValueStoreRank]*1000000000000000000;\r\n\t\t// assignedTicker[msg.sender] = bytes32ToString(randomTickers[nextValueStoreRank]);\r\n\t\tassignedTicker[msg.sender] = randomTickers[nextValueStoreRank];\r\n\r\n\t\tnextValueStoreRank += 1;\r\n\t\tif (nextValueStoreRank >= 20)\r\n\t\t{\r\n\t\t\tnextValueStoreRank = 0;\r\n\t\t}\r\n\r\n\t\t// Crediting points\r\n\t\tif (!exerciceProgression[msg.sender][1])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][1] = true;\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex2_testErc20TickerAndSupply()\r\n\tpublic\r\n\t{\r\n\t\t// Checking ticker and supply were received\r\n\t\trequire(exerciceProgression[msg.sender][1]);\r\n\r\n\t\t// Checking exercice was submitted\r\n\t\trequire(exerciceProgression[msg.sender][0]);\r\n\r\n\t\t// Checking ticker was set properly\r\n\t\trequire(_compareStrings(assignedTicker[msg.sender], studentErc20[msg.sender].symbol()), \"Incorrect ticker\");\r\n\t\t// Checking supply was set properly\r\n\t\trequire(assignedSupply[msg.sender] == studentErc20[msg.sender].totalSupply(), \"Incorrect supply\");\r\n\t\t// Checking some ERC20 functions were created\r\n\t\trequire(studentErc20[msg.sender].allowance(address(this), msg.sender) == 0, \"Allowance not implemented or incorrectly set\");\r\n\t\trequire(studentErc20[msg.sender].balanceOf(address(this)) == 0, \"BalanceOf not implemented or incorrectly set\");\r\n\t\trequire(studentErc20[msg.sender].approve(msg.sender, 10), \"Approve not implemented\");\r\n\r\n\t\t// Crediting points\r\n\t\tif (!exerciceProgression[msg.sender][2])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][2] = true;\r\n\t\t\t// Creating ERC20\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction ex3_testGetToken()\r\n\tpublic\r\n\t{\r\n\t\t// Checking ERC20 was created\r\n\t\trequire(address(studentErc20[msg.sender]) != address(0), \"Student ERC20 not registered\");\r\n\r\n\t\t// Retrieving initial balance\r\n\t\tuint256 initialBalance = studentErc20[msg.sender].balanceOf(address(this));\r\n\r\n\t\t// Call getToken\r\n\t\tstudentErc20[msg.sender].getToken();\r\n\r\n\t\t// Retrieving final balance\r\n\t\tuint256 finalBalance = studentErc20[msg.sender].balanceOf(address(this));\r\n\r\n\t\trequire(initialBalance < finalBalance, \"Token balance did not increase\");\r\n\r\n\t\tif (!exerciceProgression[msg.sender][3])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][3] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex4_testBuyToken()\r\n\tpublic\r\n\t{\r\n\r\n\t\t_testBuyToken();\r\n\r\n\t\tif (!exerciceProgression[msg.sender][4])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][4] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex5_testDenyListing()\r\n\tpublic\r\n\t{\r\n\t\t// Checking ERC20 was created\r\n\t\trequire(address(studentErc20[msg.sender]) != address(0), \"Student ERC20 not registered\");\r\n\r\n\t\trequire(!studentErc20[msg.sender].isCustomerWhiteListed(address(this)));\r\n\r\n\t\tbool wasBuyAccepted = true;\r\n\t\ttry studentErc20[msg.sender].getToken() returns (bool v) \r\n\t\t{\r\n\t\t\twasBuyAccepted = v;\r\n        } \r\n        catch \r\n        {\r\n            // This is executed in case revert() was used.\r\n            wasBuyAccepted = false;\r\n        }\r\n\r\n        require(!wasBuyAccepted);\r\n\r\n        if (!exerciceProgression[msg.sender][5])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][5] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex6_testAllowListing()\r\n\tpublic\r\n\t{\r\n\t\t// Checking ERC20 was created\r\n\t\trequire(address(studentErc20[msg.sender]) != address(0), \"Student ERC20 not registered\");\r\n\t\t// Checking ex5 was done\r\n\t\trequire(exerciceProgression[msg.sender][5]);\r\n\r\n\t\t// Check if the current contract is whitelisted\r\n\t\trequire(studentErc20[msg.sender].isCustomerWhiteListed(address(this)));\r\n\r\n\t\t// Trying to buy\r\n\t\tex3_testGetToken();\r\n\r\n        if (!exerciceProgression[msg.sender][6])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][6] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex7_testDenyListing()\r\n\tpublic\r\n\t{\r\n\t\t// Checking ERC20 was created\r\n\t\trequire(address(studentErc20[msg.sender]) != address(0), \"Student ERC20 not registered\");\r\n\r\n\t\trequire(!studentErc20[msg.sender].isCustomerWhiteListed(address(this)));\r\n\r\n\t\trequire(studentErc20[msg.sender].customerTierLevel(address(this)) == 0);\r\n\r\n\t\tbool wasBuyAccepted = true;\r\n\t\ttry studentErc20[msg.sender].buyToken.value(0.0001 ether)() returns (bool v) \r\n\t\t{\r\n\t\t\twasBuyAccepted = v;\r\n        } \r\n        catch \r\n        {\r\n            // This is executed in case revert() was used.\r\n            wasBuyAccepted = false;\r\n        }\r\n\r\n        require(!wasBuyAccepted);\r\n\r\n        if (!exerciceProgression[msg.sender][7])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][7] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex8_testTier1Listing()\r\n\tpublic\r\n\t{\r\n\t\t// Checking ERC20 was created\r\n\t\trequire(address(studentErc20[msg.sender]) != address(0), \"Student ERC20 not registered\");\r\n\t\t// Checking ex7 was done\r\n\t\trequire(exerciceProgression[msg.sender][7]);\r\n\r\n\t\t// Check if the current contract is whitelisted\r\n\t\trequire(studentErc20[msg.sender].isCustomerWhiteListed(address(this)));\r\n\r\n\t\t// Check if the current contract has the correct tier level\r\n\t\trequire(studentErc20[msg.sender].customerTierLevel(address(this)) == 1);\r\n\r\n\t\t// Trying to buy\r\n\t\tex8Tier1AmountBought[msg.sender] = _testBuyToken();\r\n\r\n        if (!exerciceProgression[msg.sender][8])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][8] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex9_testTier2Listing()\r\n\tpublic\r\n\t{\r\n\t\t// Checking ERC20 was created\r\n\t\trequire(address(studentErc20[msg.sender]) != address(0), \"Student ERC20 not registered\");\r\n\t\t// Checking ex7 was done\r\n\t\trequire(exerciceProgression[msg.sender][7]);\r\n\r\n\t\t// Check if the current contract is whitelisted\r\n\t\trequire(studentErc20[msg.sender].isCustomerWhiteListed(address(this)));\r\n\r\n\t\t// Check if the current contract has the correct tier level\r\n\t\trequire(studentErc20[msg.sender].customerTierLevel(address(this)) == 2);\r\n\r\n\t\t// Trying to buy\r\n\t\tuint256 tier2AmountBought = _testBuyToken();\r\n\r\n\t\t// Checking that bought amount is twice what was bought before, for the same price\r\n\t\trequire(tier2AmountBought == 2 * ex8Tier1AmountBought[msg.sender]);\r\n\r\n\r\n        if (!exerciceProgression[msg.sender][9])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][9] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ex10_allInOne() \r\n\tpublic  \r\n\t{\r\n\t\t// Checking that solution has no token yet\r\n\t\tuint256 initialBalance = TDERC20.balanceOf(msg.sender);\r\n\t\trequire(initialBalance == 0, \"Solution should start with 0 points\");\r\n\r\n\t\t// Calling the solution so that it solves the workshop\r\n\t\tIAllInOneSolution callerSolution = IAllInOneSolution(msg.sender);\r\n\t\tcallerSolution.completeWorkshop();\r\n\r\n\t\t// Checking that at least 10 exercices where validated\r\n\t\tuint256 finalBalance = TDERC20.balanceOf(msg.sender);\r\n\t\tuint256 decimals = TDERC20.decimals();\r\n\t\trequire(finalBalance >= 10**decimals *18, \"Solution should end with at least than 2 points\");\r\n\r\n        if (!exerciceProgression[msg.sender][10])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][10] = true;\r\n\t\t\t// Distribute points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/* Internal functions and modifiers */ \r\n\r\n\t/*\r\n\tmodifier onlyTeachers() \r\n\t{\r\n\r\n\t    require(TDERC20.teachers(msg.sender));\r\n\t    _;\r\n\t}\r\n\r\n\tfunction submitExercice(IExerciceSolution studentExercice)\r\n\tpublic\r\n\t{\r\n\t\t// Checking this contract was not used by another group before\r\n\t\trequire(!hasBeenPaired[address(studentExercice)]);\r\n\r\n\t\t// Assigning passed ERC20 as student ERC20\r\n\t\tstudentErc20[msg.sender] = studentExercice;\r\n\t\thasBeenPaired[address(studentExercice)] = true;\r\n\t\tif (!exerciceProgression[msg.sender][0])\r\n\t\t{\r\n\t\t\texerciceProgression[msg.sender][0] = true;\r\n\t\t\t// Setup points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t\t// Creating contract points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 2);\r\n\t\t\t// Deploying contract points\r\n\t\t\t//TDERC20.distributeTokens(msg.sender, 1);\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n\r\n\tfunction _compareStrings(string memory a, string memory b) \r\n\tinternal \r\n\tpure \r\n\treturns (bool) \r\n\t{\r\n    \treturn (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n\t}\r\n\r\n\tfunction bytes32ToString(bytes32 _bytes32) \r\n\tpublic \r\n\tpure returns (string memory) \r\n\t{\r\n        uint8 i = 0;\r\n        while(i < 32 && _bytes32[i] != 0) {\r\n            i++;\r\n        }\r\n        bytes memory bytesArray = new bytes(i);\r\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\r\n            bytesArray[i] = _bytes32[i];\r\n        }\r\n        return string(bytesArray);\r\n    }\r\n\r\n\tfunction _testBuyToken()\r\n\tinternal\r\n\treturns(uint256 firstBuyAmount)\r\n\t{\r\n\t\t\t\t// Checking ERC20 was created\r\n\t\trequire(address(studentErc20[msg.sender]) != address(0), \"Student ERC20 not registered\");\r\n\r\n\t\t// Retrieving initial balance\r\n\t\tuint256 initialBalance = studentErc20[msg.sender].balanceOf(address(this));\r\n\r\n\t\t// Call buyToken\r\n\t\tstudentErc20[msg.sender].buyToken.value(0.0001 ether)();\r\n\r\n\t\t// Retrieving intermediate balance\r\n\t\tuint256 intermediateBalance = studentErc20[msg.sender].balanceOf(address(this));\r\n\r\n\t\trequire(initialBalance < intermediateBalance, \"Token balance did not increase\");\r\n\r\n\t\tfirstBuyAmount = intermediateBalance - initialBalance;\r\n\r\n\t\t// Call buyToken again\r\n\t\tstudentErc20[msg.sender].buyToken.value(0.0003 ether)();\r\n\r\n\t\t// Retrieving final balance\r\n\t\tuint256 finalBalance = studentErc20[msg.sender].balanceOf(address(this));\r\n\r\n\t\trequire(intermediateBalance < finalBalance, \"Token balance did not increase\");\r\n\r\n\t\tuint256 secondBuyAmount = finalBalance - intermediateBalance;\r\n\r\n\t\t// Check that second buy amount was a different amount that first buy amount\r\n\r\n\t\trequire(secondBuyAmount > firstBuyAmount, \"Second buy amount lower than first\");\r\n\t}\r\n\r\n\tfunction readTicker(address studentAddres)\r\n\tpublic\r\n\tview\r\n\treturns(string memory)\r\n\t{\r\n\t\treturn assignedTicker[studentAddres];\r\n\t}\r\n\r\n\tfunction readSupply(address studentAddres)\r\n\tpublic\r\n\tview\r\n\treturns(uint256)\r\n\t{\r\n\t\treturn assignedSupply[studentAddres];\r\n\t}\r\n\r\n\tfunction setRandomTickersAndSupply(uint256[20] memory _randomSupplies, string[20] memory _randomTickers) \r\n\tpublic \r\n\tonlyTeachers\r\n\t{\r\n\t\trandomSupplies = _randomSupplies;\r\n\t\trandomTickers = _randomTickers;\r\n\t\tnextValueStoreRank = 0;\r\n\t\tfor (uint i = 0; i < 20; i++)\r\n\t\t{\r\n\t\t\temit newRandomTickerAndSupply(randomTickers[i], randomSupplies[i]);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t*/\r\n\r\n}\r\n",
  "sourcePath": "C:\\Users\\blanp\\OneDrive - De Vinci\\Documents\\S7\\Rust Programming\\VS repo\\erc20-101\\contracts\\Evaluator.sol",
  "ast": {
    "absolutePath": "project:/contracts/Evaluator.sol",
    "exportedSymbols": {
      "Evaluator": [
        1104
      ]
    },
    "id": 1105,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1099,
        "literals": [
          "solidity",
          "^",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:5"
      },
      {
        "id": 1100,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "25:33:5"
      },
      {
        "absolutePath": "project:/contracts/ERC20TD.sol",
        "file": "./ERC20TD.sol",
        "id": 1101,
        "nodeType": "ImportDirective",
        "scope": 1105,
        "sourceUnit": 1098,
        "src": "62:23:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/IExerciceSolution.sol",
        "file": "./IExerciceSolution.sol",
        "id": 1102,
        "nodeType": "ImportDirective",
        "scope": 1105,
        "sourceUnit": 1146,
        "src": "87:33:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/IAllInOneSolution.sol",
        "file": "./IAllInOneSolution.sol",
        "id": 1103,
        "nodeType": "ImportDirective",
        "scope": 1105,
        "sourceUnit": 1111,
        "src": "122:33:5",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1104,
        "linearizedBaseContracts": [
          1104
        ],
        "name": "Evaluator",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 1105,
        "src": "159:11520:5"
      }
    ],
    "src": "0:11681:5"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/Evaluator.sol",
      "exportedSymbols": {
        "Evaluator": [
          1104
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            "^",
            "0.6",
            ".0"
          ]
        },
        "id": 1099,
        "name": "PragmaDirective",
        "src": "0:23:5"
      },
      {
        "attributes": {
          "literals": [
            "experimental",
            "ABIEncoderV2"
          ]
        },
        "id": 1100,
        "name": "PragmaDirective",
        "src": "25:33:5"
      },
      {
        "attributes": {
          "SourceUnit": 1098,
          "absolutePath": "project:/contracts/ERC20TD.sol",
          "file": "./ERC20TD.sol",
          "scope": 1105,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 1101,
        "name": "ImportDirective",
        "src": "62:23:5"
      },
      {
        "attributes": {
          "SourceUnit": 1146,
          "absolutePath": "project:/contracts/IExerciceSolution.sol",
          "file": "./IExerciceSolution.sol",
          "scope": 1105,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 1102,
        "name": "ImportDirective",
        "src": "87:33:5"
      },
      {
        "attributes": {
          "SourceUnit": 1111,
          "absolutePath": "project:/contracts/IAllInOneSolution.sol",
          "file": "./IAllInOneSolution.sol",
          "scope": 1105,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 1103,
        "name": "ImportDirective",
        "src": "122:33:5"
      },
      {
        "attributes": {
          "abstract": false,
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            1104
          ],
          "name": "Evaluator",
          "nodes": [
            null
          ],
          "scope": 1105
        },
        "id": 1104,
        "name": "ContractDefinition",
        "src": "159:11520:5"
      }
    ],
    "id": 1105,
    "name": "SourceUnit",
    "src": "0:11681:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.6.2+commit.bacdbe57.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.10",
  "updatedAt": "2022-12-05T00:35:15.494Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}